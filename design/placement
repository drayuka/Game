placement

inital placement:
	record inital placement of any pre-exisiting buildings (user intervention)
	initalize placement of all possible buildings
	start < 5 of the controller deciding based off of a heuristic (random to start?)
	making sure that each point has sufficent empty space/roads to have pathing or repairability if neccesary
	order of placement should be order of buildings gained.
	spawns should want at least 3 empty/road spaces around themselves
	resource buildings should want at least 1 road space around themselves
	when it runs out of places to place buildings, add border spaces
	should also place source containers

build plan stages:
	spawn/inital: for use with job.inital no defense, pure energy economy
	rcl 1:
	rcl 3:
	rcl 4: storage replace container
	rcl 5: stop of job.inital, links
	rcl 6: 2 towers, terminal, extractor
	rcl 7:
	rcl 8: defense (walls/ramparts, all towers)
	final: nuker, observer, labs

    CONTROLLER_STRUCTURES: {
        "spawn": 		{1: 1, 		2: 1, 	 3: 1, 	4: 1, 	5: 1, 	6: 1, 	7: 2, 8: 3},
        "extension": 	{1: 0, 		2: 5, 	 3: 10, 4: 20, 	5: 30, 	6: 40, 	7: 50, 8: 60},
        "link": 		{1: 0, 		2: 0, 	 3: 0, 	4: 0, 	5: 2, 	6: 3, 	7: 4, 8: 6},
        "storage": 		{1: 0, 		2: 0, 	 3: 0, 	4: 1, 	5: 1, 	6: 1, 	7: 1, 8: 1},
        "tower": 		{1: 0, 		2: 0, 	 3: 1, 	4: 1, 	5: 2, 	6: 2, 	7: 3, 8: 6},
        "observer": 	{1: 0, 		2: 0, 	 3: 0, 	4: 0, 	5: 0, 	6: 0, 	7: 0, 8: 1},
        "powerSpawn": 	{1: 0, 		2: 0, 	 3: 0, 	4: 0, 	5: 0, 	6: 0, 	7: 0, 8: 1},
        "extractor": 	{1: 0, 		2: 0, 	 3: 0, 	4: 0, 	5: 0, 	6: 1, 	7: 1, 8: 1},
        "terminal": 	{1: 0, 		2: 0, 	 3: 0, 	4: 0, 	5: 0, 	6: 1, 	7: 1, 8: 1},
        "lab": 			{1: 0, 		2: 0, 	 3: 0, 	4: 0, 	5: 0, 	6: 3, 	7: 6, 8: 10},
        "nuker": 		{1: 0, 		2: 0, 	 3: 0, 	4: 0, 	5: 0, 	6: 0, 	7: 0, 8: 1}
    },

border space definition - when growing base spaces, any space which is within 1 space of a base space placed object but also pathable without going through any base or other border spaces.

complete pathfinding -
	find paths between all empty/road spaces things within a base maximum size (or 17x17 with protection)

	require:
		all buildings pathable from (a) spawn (except for observer)
		all spawns pathable to all room borders
		all buildings/roads within 3 of an empty pathable space (for building and repair)
		

	minimize:
		average path distance to extensions and spawns
		average distance between labs (this should be highly penalized if it is much more than good design minimums)
		average distance from borders to towers 
		nuke vulnerability (clumpiness of critical infrastructure, towers, etc) quantified by the number of towers <5 from each other
		distance from towers to controller (should be low)
		number of border spaces
		average path distance to labs

		

Order of operations:
placeAll() //places all buildings without placing them in invalid places, starts near <5 the controller
permute(base)
	//breadth first search on permuting buildings to discover local minima that donâ€™t need repath
	if(permute space/road and building)
		hash and compare to recent to reduce repition
		verify pathing/reachability still good for nearby buildings (has reachable path))
		repath for all (c++ wasm?)
		calculate cost
		if < currentMinCost set as base
	if(permute 2 buildings)
		hash and compare to recent to reduce repition
		verify pathing/reachability (probably only matters if changing observer location as it does not need to be < 1 reachable)
		calculate cost
		if < currentMinCost set as base
		hash base
	NOTE: don't permute buildings with different requirements.

define border:
	for finished placement map
	should define and record border spaces which are the last grown spaces
	any space which is within 3 of a non base space